@{
	ViewBag.Title = "Chat";
}
<h2>Chat</h2>
<div class="container">
	<div class="jumbotron">
		<h1 id="groupName"></h1>
	</div>
	<div class="row">
		<input id="startCall" type="button" class="btn btn-default col-sm-3" value="Start Call" />
		<input id="hangUp" type="button" class="btn btn-default col-sm-3" value="Hang Up" />
	</div>
	<div id="video" class="panel panel-default">
		<video id="remoteVideo" autoplay width="640" height="480" controls></video>
		<video id="localVideo" autoplay muted title="Local video" width="320" height="240"></video>
	</div>
	<div class="row">
		<input type="text" id="message" class="col-sm-8 form-control" />
		<input type="button" id="sendmessage" value="Send" class="col-sm-4" />
	</div>
	<div>
		<input type="hidden" id="displayname" />
		<ul id="discussion"></ul>
	</div>

</div>
@section scripts {
	<!--Script references. -->
	<!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
	<!--Reference the SignalR library. -->
	<script src="~/Scripts/jquery.signalR-2.3.0.min.js"></script>
	<!--Reference the autogenerated SignalR hub script. -->
	<script src="~/signalr/hubs"></script>
	<script src="~/Scripts/ChatHubDom.js"></script>
	<script src="~/Scripts/WebRTCHandler.js"></script>
	<!--SignalR script to update the chat page and send messages.-->
	<script>
		$( function ()
		{
			// Reference the auto-generated proxy for the hub.
			var chat = $.connection.chatHub;
			// Create a function that the hub can call back to display messages.
			chat.client.addNewMessageToPage = function ( name, message )
			{
				// Add the message to the page.
				let HtmlItem_LI			= document.createElement( "LI" );
				let HtmlItem_STRONG		= document.createElement( "STRONG" );
				let HtmlItem_P_Name		= document.createTextNode( htmlEncode( name ) );
				let HtmlItem_P_Message	= document.createTextNode( htmlEncode( message ) );

				HtmlItem_STRONG.appendChild( HtmlItem_P_Name );
				HtmlItem_LI.appendChild( HtmlItem_STRONG );
				HtmlItem_LI.appendChild( HtmlItem_P_Message );

				$discussion.appendChild( HtmlItem_LI );
			};
			chat.client.displayErrorMessage = function ( strErr )
			{
				alert( strErr );
			};
			chat.client.sendOffer = function ( desc )
			{
				answer( JSON.parse( desc ) );
			}
			chat.client.sendAnswer = function ( desc )
			{
				getAnswer( JSON.parse( desc ) );
			};
			// Get the user name and store it to prepend to messages.
			while ( $displayName.value === '' ) {
				$displayName.value = prompt( 'Please enter your name:', '' );
			}
			while ( $groupName.innerHTML === '' ) {
				$groupName.innerHTML = prompt( 'Please enter the group name:', '' );
			}
			// Set initial focus to message input box.
			$message.focus();
			// Start the connection.
			$.connection.hub.start().done( function ()
			{
				chat.server.joinOrCreateGroup( $displayName.value, $groupName.innerHTML );
				$btnSendMessage.onclick = function ()
				{
					// Call the Send method on the hub.orosp
					chat.server.send( $displayName.value, $message.value, $groupName.innerHTML );
					// Clear text box and reset focus for next comment.
					$message.value = '';
					$message.focus();
				}
			} );
		} );
		// This optional function html-encodes messages for display in the page.
		function htmlEncode( value )
		{
			var encodedValue = $( '<div />' ).text( value ).html();
			return encodedValue;
		}
	</script>
}